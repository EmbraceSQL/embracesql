---
to: "{{configuration.embraceSQLRoot}}/context.ts"
---

/**
* THIS FILE IS GENERATED -- edits will be lost
*/

{{> shared-context.ts}}

// Generation starts here

// handle a folder, these use the base types for rows and parameters
// to allow them to be maximally generic
export type FolderHandler = (context: Context<SQLRow>) => Promise<Context<SQLRow>>;

// tree structure of the entire set of databases and handlers
export type SQLModuleTree = {
  databases: {
  {{#eachInMap databases}}
    {{@key}}: {
      transactions: DatabaseTransactions,
      {{#treeAMap value.SQLModules database=value}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
      autocrud: {
      {{#treeAMap value.AutocrudModules database=value}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
      },
    },
  {{/eachInMap}}
  }
};
{{#*inline "moduleTree"}}
{{name}}: {
  {{#if value}}
  sql: (parameters: {{value.contextName}}Parameters) => Promise<{{value.contextName}}Row[]>;
  {{/if}}
  {{#each children}}
    {{> moduleTree this database=database}}
  {{/each}}
},
{{/inline}}

// parameters, result row, and context types
{{#eachInMap databases}}
// database {{@key}}
{{#eachInMap value.SQLModules}}
// sql module {{@key}} {{value}}
{{> moduleMetadata module=value}}
{{/eachInMap}}
{{#eachInMap value.AutocrudModules}}
// autocrud module {{@key}} {{value}}
{{> moduleMetadata module=value}}
{{/eachInMap}}
{{/eachInMap}}


{{#*inline "moduleMetadata"}}

// module {{module.contextName}} parameters, row type, and context type
{{> resultsetMetadata module}}
{{> parametersMetadata module}}
export type {{module.contextName}}Context = 
  SQLModuleTree & Context<{{module.contextName}}Row> & { 
    parameters: {{module.contextName}}Parameters
  };
export type {{module.contextName}}Handler = 
  (context: {{module.contextName}}Context) => Promise<{{module.contextName}}Context>;
{{/inline}}

{{#*inline "resultsetMetadata"}}
export type {{contextName}}Row = 
SQLRow & {
  {{#each resultsetMetadata}}
    {{name}}: {{type}}
  {{/each}}
};
{{/inline}}

{{#*inline "parametersMetadata"}}
export type {{contextName}}Parameters = 
SQLParameters & {
  {{#each namedParameters}}
    {{name}}: {{type}}
  {{/each}}
};
{{/inline}}

