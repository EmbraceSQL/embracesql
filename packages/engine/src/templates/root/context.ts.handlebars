---
to: "{{configuration.embraceSQLRoot}}/context.ts"
---

{{> shared-context.ts}}

// Generation starts here

// handle a folder, these use the base types for rows and parameters
// to allow them to be maximally generic
export type FolderHandler = (context: Context<SQLRow>) => Promise<Context<SQLRow>>;



// parameters, result row, and context types
{{#eachInMap databases}}
// database {{@key}}
{{#eachInMap value.sqlModules}}
// sql module {{@key}} {{value}}
{{> moduleMetadata module=value}}
{{/eachInMap}}
{{#eachInMap value.autocrudModules}}
// autocrud module {{@key}} {{value}}
{{> moduleMetadata module=value}}
{{/eachInMap}}
{{/eachInMap}}


{{#*inline "moduleMetadata"}}

// module {{module.contextName}} parameters, row type, and context type
{{> resultsetMetadata module}}
{{> parametersMetadata module}}
export type {{module.contextName}}Context = 
  SQLModuleTree & Context<{{module.contextName}}Row> & { 
    parameters: {{module.contextName}}Parameters
  };
export type {{module.contextName}}Handler = 
  (context: {{module.contextName}}Context) => Promise<{{module.contextName}}Context>;
{{/inline}}

{{#*inline "resultsetMetadata"}}
export type {{contextName}}Row = 
{
  {{#each resultsetMetadata}}
    {{name}}: {{type}}
  {{/each}}
};
export type {{contextName}}Result = {{contextName}}Row | {{contextName}}Row[] | undefined;
{{/inline}}

{{#*inline "parametersMetadata"}}
export type {{contextName}}ParameterSet = 
{
  {{#each namedParameters}}
    {{name}}: {{type}}
  {{/each}}
};
export type {{contextName}}Parameters = {{contextName}}ParameterSet | {{contextName}}ParameterSet[] | undefined;
{{/inline}}


// flat map of execution functions
export type ExecutorMap = {
    {{#eachInMap databases}}
    // database {{@key}}
    {{#eachInMap value.sqlModules database=@key}}
      {{value.contextName}}:  
          (context: {{value.contextName}}Context) => Promise<{{value.contextName}}Context>,
    {{/eachInMap}}
    {{#eachInMap value.autocrudModules database=@key}}
      {{value.contextName}}:  
          (context: {{value.contextName}}Context) => Promise<{{value.contextName}}Context>,
    {{/eachInMap}}
    {{/eachInMap}}
};

// tree structure of the entire set of databases and handlers
export type SQLModuleTree = {
  databases: {
  {{#eachInMap databases}}
    {{@key}}: {
      transactions: DatabaseTransactions,
      {{#treeAMap value.sqlModules database=value}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
      autocrud: {
      {{#treeAMap value.autocrudModules database=value}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
      },
    },
  {{/eachInMap}}
  }
};

{{#*inline "moduleTree"}}
  {{#if children.length}}
  {{name}}: {
  {{#each children}}
    {{> moduleTree this database=database}}
  {{/each}}
  },
  {{else}}
  {{name}}:(...parameters: {{value.contextName}}Parameters[]) => Promise<{{value.contextName}}Result>;
  {{/if}}
{{/inline}}
