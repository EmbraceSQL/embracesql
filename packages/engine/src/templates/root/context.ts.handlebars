---
to: "{{configuration.embraceSQLRoot}}/context.ts"
---

import * as types from "@embracesql/engine/shared-context";

// relay some types
export type Closeable = types.Closeable;
export type HasConfiguration = types.HasConfiguration;
export type HasEntryPoints = types.HasEntryPoints;

// Generation starts here

// handle a folder, these use the base types for rows and parameters
// to allow them to be maximally generic
export type FolderHandler = (context: types.Context) => Promise<void>;


// parameters, result row, and context types
{{#eachInMap databases}}
// database {{@key}}
{{#eachInMap value.modules}}
{{> moduleMetadata module=value}}
{{/eachInMap}}
{{/eachInMap}}

{{#*inline "moduleMetadata"}}

// module {{module.contextName}} parameters, row type, and context type
{{> resultsetMetadata module}}
{{> parametersMetadata module}}
export type {{module.contextName}}Context = 
  SQLModuleTree & types.GenericContext<{{module.contextName}}ParameterSet, {{module.contextName}}Row>;
export type {{module.contextName}}Handler = (context: {{module.contextName}}Context) => Promise<void>;
{{/inline}}

{{#*inline "resultsetMetadata"}}
export type {{contextName}}Row = types.SQLRow &
{
  {{#each resultsetMetadata}}
    {{name}}: {{> resultsetType type}}
  {{/each}}
};
{{/inline}}

{{#*inline "resultsetType"}}
{{#isArray this}}
  {
    {{#each this}}
      {{name}}: {{> resultsetType type}}
    {{/each}}
  };
{{else}}
  {{this}};
{{/isArray}}
{{/inline}}

{{#*inline "parametersMetadata"}}
export type {{contextName}}ParameterSet = types.SQLParameterSet &
{
  {{#each namedParameters}}
    {{name}}: {{type}}
  {{/each}}
};
{{/inline}}


// flat map of execution functions
export type ExecutorMap = {
    {{#eachInMap moduleExecutors}}
      {{value.module.contextName}}:  
          (context: {{value.module.contextName}}Context) => Promise<{{value.module.contextName}}Context>,
    {{/eachInMap}}
};

/**
* Tree structure of the entire set of databases and handlers, used
* inside event handlers to call back and run more queries.
*/
export type SQLModuleTree = {
  databases?: {
  {{#eachInMap databases}}
    {{@key}}: {
      transactions: types.DatabaseTransactions,
      {{#treeAMap value.modules database=value}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
    },
  {{/eachInMap}}
  }
};

{{#*inline "moduleTree"}}
  {{#if children.length}}
  {{name}}: {
  {{#each children}}
    {{> moduleTree this database=database}}
  {{/each}}
  },
  {{else}}
  {{name}}:(...parameters: {{value.contextName}}ParameterSet[]) => 
    Promise<{{value.contextName}}Context["results"]>;
  {{/if}}
{{/inline}}
