---
to: "{{configuration.embraceSQLRoot}}/index.ts"
---

import { CanSetHeaders, Headers, buildInternalContext, loadConfiguration, InternalContext, withTransaction, SQLRow, Context, GenericContext, Closeable, HasConfiguration, HasEntryPoints, SQLParameterSet, DatabaseTransactions, Grant, Message, ValueOrArray } from "@embracesql/engine";

export { Context, InternalContext };

// Generation starts here

// handle a folder, these use the base types for rows and parameters
// to allow them to be maximally generic
export type FolderHandler = (context: Context) => Promise<void>;
export type SystemHandler = (root: InternalContext, context: Context) => Promise<void>;


// parameters, result row, and context types
{{#eachInMap databases}}
// database {{@key}}
{{#eachInMap value.modules}}
{{> moduleMetadata module=value}}
{{/eachInMap}}
{{/eachInMap}}

{{#*inline "moduleMetadata"}}

// module {{module.contextName}} parameters, row type, and context type
{{> resultsetMetadata module}}
{{> parametersMetadata module}}
export type {{module.contextName}}Context = 
  SQLModuleTree & GenericContext<{{module.contextName}}ParameterSet, {{module.contextName}}Row>;
export type {{module.contextName}}Handler = (context: {{module.contextName}}Context) => Promise<void>;
{{/inline}}

{{#*inline "resultsetMetadata"}}
export type {{contextName}}Row = SQLRow &
{
  {{#each resultsetMetadata}}
    {{name}}: {{> resultsetType type}}
  {{/each}}
};
{{/inline}}

{{#*inline "resultsetType"}}
{{#isArray this}}
  {
    {{#each this}}
      {{name}}: {{> resultsetType type}}
    {{/each}}
  };
{{else}}
  {{this}};
{{/isArray}}
{{/inline}}

{{#*inline "parametersMetadata"}}
{{#if namedParameters.length}}
export type {{contextName}}ParameterSet = SQLParameterSet &
{
  {{#each namedParameters}}
    {{name}}: {{type}}
  {{/each}}
};
{{else}}
export type {{contextName}}ParameterSet = SQLParameterSet;
{{/if}}
{{/inline}}


// flat map of execution functions
export type ExecutorMap = {
    {{#eachInMap moduleExecutors}}
      {{value.module.contextName}}:  
          (context: {{value.module.contextName}}Context) => Promise<{{value.module.contextName}}Context>,
    {{/eachInMap}}
};

/**
* Tree structure of the entire set of databases and handlers, used
* inside event handlers to call back and run more queries.
*/
export type SQLModuleTree = {
  databases?: {
  {{#eachInMap databases}}
    {{@key}}: {
      transactions: DatabaseTransactions,
      {{#treeAMap value.modules database=value}}
        {{#each value}}
        {{> moduleTreeType this database=@database }}
        {{/each}}
      {{/treeAMap}}
    },
  {{/eachInMap}}
  }
};

{{#*inline "moduleTreeType"}}
  {{#if children.length}}
  {{name}}: {
  {{#each children}}
    {{> moduleTreeType this database=database}}
  {{/each}}
  },
  {{else}}
  {{name}}:(...parameters: {{value.contextName}}ParameterSet[]) => 
    Promise<ValueOrArray<{{value.contextName}}Row>>;
  {{/if}}
{{/inline}}

// We'll be making one of these
type EmbeddedEngine = HasEntryPoints &
  SQLModuleTree &
  HasConfiguration &
  CanSetHeaders &
  Closeable;


// each SQL Module has a direct execution decorator  -- this just talks to the database
// this attaches handlers both before and after wrapping the direct executor
// this ends up being a decorated map of handler+query execution capability
// autocrud is a little different, there are no handlers to load up from disk
// so this is a strong type wrapping
{{#eachInMap databases}}
{{#eachInMap value.modules}}
 import { before as {{value.contextName}}before } from "./{{value.restPath}}.before";
 import { after as {{value.contextName}}after } from "./{{value.restPath}}.after";
 import { afterError as {{value.contextName}}afterError } from "./{{value.restPath}}.afterError";
{{#each value.beforeHandlerPaths }}
 import { before as {{../value.contextName}}before{{@index}} } from "{{this}}/before";
{{/each}}
{{#each value.afterHandlerPaths }}
 import { after as {{../value.contextName}}after{{@index}} } from "{{this}}/after";
{{/each}}
{{/eachInMap}}
{{/eachInMap}}
export const decorateWithHandlers = (rootContext: InternalContext) => {
  return {
  {{#eachInMap databases}}
    // database {{@key}}
    {{#eachInMap value.modules}}
      {{value.contextName}}:  async (context: {{value.contextName}}Context) : Promise<{{value.contextName}}Context> => {
        try {
          {{#if value.beforeHandlerPaths}}
          {{#each value.beforeHandlerPaths}}
          await {{../value.contextName}}before{{@index}}(context);
          {{/each}}
          await {{value.contextName}}before(context);
          {{/if}}
          const executor = rootContext.moduleExecutors.{{value.contextName}}.executor;
          const results = executor ? (await executor(context)).results : [];
          context.results = results as {{value.contextName}}Row[];
          {{#if value.afterHandlerPaths}}
          await {{value.contextName}}after(context);
          {{#each value.afterHandlerPaths}}
          await {{../value.contextName}}after{{@index}}(context);
          {{/each}}
          {{/if}}
          return context;
        } catch (error) {
          context.error = error;
          if ({{value.contextName}}afterError) {{value.contextName}}afterError(context);
          throw error;
        }
      },
    {{/eachInMap}}
    {{/eachInMap}}
  }
};

// transaction wrappings very near the outside on each call
// this the the first 'real' execution layer
// so like - embedded engine -> entry point -> transactionwrapped 
// this ends up needeing to be generated to be this 'far' toward the client calling
// to start up before handlers -- which must be generated
export const decorateWithTransactions = (
  rootContext: InternalContext, 
  innerExecutors: ExecutorMap) => {
    return {
    {{#eachInMap databases}}
    {{#eachInMap value.modules database=@key}}
      {{value.contextName}}:  
          async (context: {{value.contextName}}Context) : Promise<{{value.contextName}}Context> => {
            return withTransaction(
              rootContext.databases.{{@database}}, 
              innerExecutors.{{value.contextName}}, 
              context);
          },
    {{/eachInMap}}
    {{/eachInMap}}
    };
};


import {validateToken} from "./validateToken";
// EmbraceSQL supports array valued parameter sets, as well as single sets of parameters
// which can result in a result set -- an array or rows -- or a single record / row
// this mapping deals with cardinality, treating arrays of 1 item as a single item on return
// to 'match' the varargs input style
export const decorateWithCardinality = (
  rootContext: InternalContext, 
  innerExecutors: ExecutorMap) => {
    return {
    {{#eachInMap databases}}
    {{#eachInMap value.modules database=@key}}
      {{value.contextName}}:  
          async (context: {{value.contextName}}Context) : Promise<ValueOrArray<{{value.contextName}}Row>> => {
              // token validation is early in the execution process
              // might as well except out early before wasting a lot of processing!
              await validateToken(rootContext, context);
              // token out of the way -- let's execute
              await innerExecutors.{{value.contextName}}(context);
              return context.results?.length === 1 ? (context.results as {{value.contextName}}Row[])[0] : context.results;
          },
    {{/eachInMap}}
    {{/eachInMap}}
    };
};

/**
* This is in effect -- EmbraceSQL, the fully configured and ready to
* run in process engine. It can be used directly in process, or wrapped
* in a server.
*/
export const EmbraceSQLEmbedded = async (rootContext?: InternalContext) : Promise<EmbeddedEngine> => {
  // the package itself has the configuration and is the root
  const internalContext = rootContext ? 
      rootContext :
      await buildInternalContext(await loadConfiguration(__dirname));
  // at this point the context has the .directQueryExecutors and
  // can run a query to the database, but doesn't have handlers yet
  const handlerWrappedExecutors = decorateWithHandlers(internalContext);
  const transactionWrappedExecutors = decorateWithTransactions(internalContext, handlerWrappedExecutors);
  const typedExecutors = decorateWithCardinality(internalContext, transactionWrappedExecutors);
  // headers that will go through on requests
  let sendHeaders = {};

  // outermost shell of calls in sql tree format -- this is for the embedded client .database.folder.module.sql syntax
  // and lets you call in a parameters --> results style, rather than the context --> context style
  const entryPointCallableDatabases = {
    {{#eachInMap databases}}
      {{@key}}: {
        transactions: {
          begin: async () : Promise<void> => {
            return internalContext.databases.{{@key}}.transactions.begin();
          },
          rollback: async () : Promise<void> => {
            return internalContext.databases.{{@key}}.transactions.rollback();
          },
          commit: async () : Promise<void> => {
            return internalContext.databases.{{@key}}.transactions.commit();
          },
          depth: () : number => {
            return internalContext.databases.{{@key}}.transactions.depth();
          }
        },
      {{#treeAMap value.modules database=value handlerMap="entryPoints"}}
        {{#each value}}
        {{> moduleTree this database=@database }}
        {{/each}}
      {{/treeAMap}}
      },
    {{/eachInMap}}
  }; 


  // this is the 'outermost' shell of calls -- entry points into the engine from a server
  // which sets up the actual execution context
  // this is in the context --> context style used for the server processes and event handlers
  const entryPoints = {
    {{#eachInMap moduleExecutors}}
      {{value.module.contextName}}:  {
        executor:
          async (parameters: {{value.module.contextName}}Context["parameters"], headers = {} as Headers) : Promise<ValueOrArray<{{value.module.contextName}}Row>> => {
            const grants = new Array<Grant>();
            return typedExecutors.{{value.module.contextName}}(
                 {
                  //base and override header concept
                  headers: {
                    ...sendHeaders,
                    ...headers
                  },
                  databases: entryPointCallableDatabases,
                  parameters,
                  results: [],
                  grants,
                  allow: (message?: Message) => {
                    grants.push({ type: "allow", message });
                  },
                  deny: (message?: Message) => {
                    grants.push({ type: "deny", message });
                  },
                }
            );
          },
        module: internalContext.moduleExecutors.{{value.module.contextName}}.module,
      },
    {{/eachInMap}}
  };



  return {
    setHeaders: (headers: Headers) => sendHeaders = headers,
    configuration: internalContext.configuration,
    databases: entryPointCallableDatabases, 
    entryPoints,
    close: internalContext.close,
  };
}

{{#*inline "moduleTree"}}
  {{#if children.length}}
  {{name}}: {
  {{#each children}}
    {{> moduleTree this database=database}}
  {{/each}}
  },
  {{else}}
  {{name}}: async (...parameters: {{value.contextName}}ParameterSet[]) 
  : Promise<ValueOrArray<{{value.contextName}}Row>> => {
      return {{@handlerMap}}.{{value.contextName}}.executor(parameters.flat());
  },
  {{/if}}
{{/inline}}
